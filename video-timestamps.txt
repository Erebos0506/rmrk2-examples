0:00 Pre-Yuri
2:50 Yuri begins
3:35 Yuri discusses RMRK is hiring
5:30 Screenshare starts (after some zoom in issues), scaffolding and yarn init
6:27 Adds dependencies to scripts/package.json (stop at 6:56, when zoom issue begins being discussed)
12:07 (Zoom in issue is resolved) Add tsconfig, .gitignore and .env
12:20 Discusses pinata.cloud as utility for pinning IPFS.
13:12 Reviews Chunky assets from [GitHub](https://github.com/rmrk-team/rmrk2-examples/tree/master/projects/scripts/assets/chunky).
14:47 Uploads Chunky folder to IPFS
15:24 Bruno answers "Can I use my local IPFS for minting?"
16:05 Creates constants file

Base Creation:
17:09 Creates create-base.ts file, discusses BASE entity, new to RMRK2.
18:10 Mentions currently there is one type of base, which is SVG
18:30 Walks through diagram of relationship between RMRK components (NFT, Collection, Resources, Base)
19:19 Diagram of BASE component in detail
20:18 Populates create-base.ts file
20:34 [Sidebar: Bruno clarifies what a Base is]
22:03 Defines JSON with all Chunky body parts
23:23 Discusses "z" value in fixedParts.
24:00 Defines and discusses slot parts, including optional fallback image "src".
24:59 Discusses "equippable" and "z" in slot parts.
25:33 Adds initializing (Polkadot) boilerplate code.
25:56 Creates and discusses utils.ts script.
28:06 Bruno answers "Can we make an MP4 base?" (Yuri shows rotato.app)
29:08 Creates the base ("juicy part")
30:45 Discusses RMRK command "equippable"
31:10 Creates collectionId
32:13 Creates baseParts
32:53 Creates CHUNKY_BASE_SYMBOL constant
33:07 Discusses Base object parameters (block, symbol, issuer, type, parts, themes)
33:53 Mints the base with Polkadot API (sendAndFinalize)
35:48 Demos local node running and create-base functionality in action.
35:57 Creates run-create-base.ts script
36:25 Runs "npx ts-node ./run-create-base.ts" (gets error, resolves Base import error)
37:01 Runs "npx ts-node ./run-create-base.ts" after correcting error
37:25 Set up for rmrk tools for fetch and consolidate
38:06 Runs "yarn fetch --prefixes=0x726d726b,0x524d524b --append=dumps-unconsolidated.json"
38:55 Mentions fetch's --from and --to parameters for production
40:45 Runs "yarn consolidate --json=dumps-unconsolidated.json"
41:29 Examines consolidated "consolidate-from-dumps-unconsolidated.json" file

Minting Chunkies:
42:11 Creates mint-chunky.ts with base mintChunky function
43:13 Adds basic boilerplate
43:25 Adds collectionId
43:49 Adds createChunkyCollection function
44:10 Discusses pinSingleMetadataFromDir (pinata util function), minting JSON metadata
45:00 Copies pinata-utils.ts and discusses
45:30 Discusses collectionMetadataCid
46:17 Discusses ItemsCollection (new Collection)
47:34 "Gavin will hate us"
47:43 Discusses sendAndFinalize for collection
48:28 Returns to mintChunky, with await createChunkyCollection
48:40 Discusses api and serialNumbers
48:59 Mints the chunkies with const promises (pinSingleMetadataFromDir)
50:11 Mints the chunk (new NFT)
51:53 Handles the returned promises in "const remarks"
52:30 Sends transactions to Polkadot with api.tx.system.remark
52:46 api.tx.utility.batch vs. api.tx.utility.batchAll
53:40 Finally, Chunkies (4) have been minted
53:45 Begins proof of success, creates new run-mint-chunkies.ts script
54:32 Runs "npx ts-node ./run-mint-chunkies.ts" with consolidation (ERROR)
55:52 Corrects "npx ts-node ./run-mint-chunkies.ts" error, creates, fetches and reconsolidates
56:18 kombucha disaster
57:30 Reviews NFTs listed in reconsolidated JSON (metadata, symbol, owner, rootowner, serial number)
58:35 Adds base resource to each Chunky in mint-chunky.ts (addBaseResource)
59:34 Shows workaround of createBase with hard-coded BASE_ID
1:01:10 Discusses reinstantiation of const nft = new NFT (for resadd)
1:01:42 Discusses resourceRemarks and resourceRemarks.push
1:02:28 Discusses nanoid for random character generation
1:02:42 Discusses "parts" array in resourceRemarks.push
1:03:44 Mentions "thumb" parameter  in resourceRemarks.push
1:04:27 Mentions option to add conditional logic so fourth Chunky will have a secondary resource (and switch to it)
1:06:05 Implements prioritization when there are secondary resources (nft.setpriority) **ERROR** (corrects at 1:10:45)
1:07:49 Creates run-chunky-resource-add.ts
1:08:57 Runs "npx ts-node ./run-chunky-resource-add.ts", and enjoys some kombucha
1:09:35 Re-fetches and re-consolidates to verify resources, confirms resources
1:10:10 Checks for re-prioritization of Chunky 4, encounters error 
1:10:45 Determines cause of error, considers resolution
1:11:34 Implements hard-coded baseredId as workaround for error
1:13:13 Re-fetches, re-consolidates to verify prioritization fix for Chunky 4 (success)
1:13:20 Examines what prioritized Chunky 4 looks like (src and priority array)

Children (Items)
1:14:28 Creates mint-chunk-items.ts (copy-paste walk-through)
1:15:04 Mentions hard-coded chunkyItems
1:15:33 Reviews mintItems function (boilerplate, collectionId)
1:16:08 Reviews chunkyItems.map iteration
1:16:50 Mentions mistake in re-pinning assets (will not fix)
1:17:12 Initializes new NFT per item
1:17:43 Returns mint remark, yielding remarks
1:17:52 Send transactions, get block
1:18:10 Discusses resources, items and slots (left-hand, right-hand)
1:19:14 Adds resources to minted (but empty) Chunkies
1:19:37 Mentions importance of block number in all except mint operations for RMRK tools
1:20:10 Discusses item.resource.forEach adding of left/right items
1:21:18 Discusses "slot" parameter of nft.resadd
1:22:32 Discusses sending items (nft.send)
1:23:48 Discusses nft.equip
1:24:34 Discusses ownership and pending field
1:25:53 Discusses ownership and secondary resources
1:26:38 Bruno answers "is it possible to add new slots at a later time" (no)
1:26:58 Adds call for createItemCollection (forgot earlier)
1:27:25 Creates run-mint-items.ts and runs it
1:30:00 Examines consolidated Chunky data dump with items (children) and changes field

React demo (nextJS app)
1:31:08 Runs yarn in rmrk2-demo
1:31:30 Copies consolidated data to chunky-demo.json
1:32:13 Reviews pages/index.tsx (fetchData)
1:33:05 Iterating through and rendering the NFTs (SvgResourceComponent)
1:34:31 Runs yarn dev (fails, works to resolve)
1:35:34 Runs yarn dev again (no items, inspects)
1:37:04 Fixes issue and refreshes
1:37:55 Mentions secondary resource doesn't show for Chunky 4
1:38:40 Future video for subscribing to see live RMRKs (live equip/unequip)

Questions
1:39:51 "What CLI theme?" iterm2 solarized (probably)
1:40:38 "What is call to action for developers after presentation" (use this for hackathon influence)
1:41:57 We are hiring (on-chain, Solidity, ink!, Rust for pallets, front-end)
1:43:29 "How can you remove a collection?" (burnCollection)




